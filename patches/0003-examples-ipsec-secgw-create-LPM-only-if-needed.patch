From 7d61a2f3547a0a7b59bc035643f0439dfcc4628d Mon Sep 17 00:00:00 2001
From: Dmitri Epshtein <dima@marvell.com>
Date: Mon, 19 Mar 2018 17:09:03 +0200
Subject: [PATCH 3/5] examples/ipsec-secgw: create LPM only if needed

IPv4 LPM created only if there are IPv4 entries in configuration file
IPv6 LPM created only if there are IPv6 entries in configuration file

Change-Id: I689f812ce52e88d7136087f0f52400ae89463934
Signed-off-by: Dmitri Epshtein <dima@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/52176
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Natalie Samsonov <nsamsono@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/52421
---
 examples/ipsec-secgw/rt.c | 136 +++++++++++++++++++++++++++-------------------
 1 file changed, 79 insertions(+), 57 deletions(-)

diff --git a/examples/ipsec-secgw/rt.c b/examples/ipsec-secgw/rt.c
index ec3a375..adcb1c0 100644
--- a/examples/ipsec-secgw/rt.c
+++ b/examples/ipsec-secgw/rt.c
@@ -14,8 +14,10 @@
 #include "ipsec.h"
 #include "parser.h"
 
-#define RT_IPV4_MAX_RULES	1024
-#define RT_IPV6_MAX_RULES	1024
+#define RT_IPV4_MAX_RULES		1024
+#define RT_IPV4_TBL8_NUM_ENTRIES	RTE_LPM_TBL8_NUM_ENTRIES
+#define RT_IPV6_MAX_RULES		1024
+#define RT_IPV6_TBL8_NUM_ENTRIES	RTE_LPM_TBL8_NUM_ENTRIES
 
 struct ip4_route {
 	uint32_t ip;
@@ -126,11 +128,9 @@ rt_init(struct socket_ctx *ctx, int32_t socket_id)
 	char name[PATH_MAX];
 	uint32_t i;
 	int32_t ret;
-	struct rte_lpm *lpm;
-	struct rte_lpm6 *lpm6;
+	struct rte_lpm *lpm = NULL;
+	struct rte_lpm6 *lpm6 = NULL;
 	char a, b, c, d;
-	struct rte_lpm_config conf = { 0 };
-	struct rte_lpm6_config conf6 = { 0 };
 
 	if (ctx == NULL)
 		rte_exit(EXIT_FAILURE, "NULL context.\n");
@@ -146,61 +146,83 @@ rt_init(struct socket_ctx *ctx, int32_t socket_id)
 	if (nb_rt_ip4 == 0 && nb_rt_ip6 == 0)
 		RTE_LOG(WARNING, IPSEC, "No Routing rule specified\n");
 
-	printf("Creating IPv4 Routing Table (RT) context with %u max routes\n",
-			RT_IPV4_MAX_RULES);
-
-	/* create the LPM table */
-	snprintf(name, sizeof(name), "%s_%u", "rt_ip4", socket_id);
-	conf.max_rules = RT_IPV4_MAX_RULES;
-	conf.number_tbl8s = RTE_LPM_TBL8_NUM_ENTRIES;
-	lpm = rte_lpm_create(name, socket_id, &conf);
-	if (lpm == NULL)
-		rte_exit(EXIT_FAILURE, "Unable to create %s LPM table "
-			"on socket %d\n", name, socket_id);
-
-	/* populate the LPM table */
-	for (i = 0; i < nb_rt_ip4; i++) {
-		ret = rte_lpm_add(lpm, rt_ip4[i].ip, rt_ip4[i].depth,
-			rt_ip4[i].if_out);
-		if (ret < 0)
-			rte_exit(EXIT_FAILURE, "Fail to add entry num %u to %s "
-				"LPM table on socket %d\n", i, name, socket_id);
-
-		uint32_t_to_char(rt_ip4[i].ip, &a, &b, &c, &d);
-		printf("LPM: Adding route %hhu.%hhu.%hhu.%hhu/%hhu (%hhu)\n",
+	if (nb_rt_ip4) {
+		struct rte_lpm_config conf = { 0 };
+
+		/* create the LPM table */
+		snprintf(name, sizeof(name), "%s_%u", "rt_ip4", socket_id);
+		conf.max_rules = RT_IPV4_MAX_RULES;
+		conf.number_tbl8s = RT_IPV4_TBL8_NUM_ENTRIES;
+
+		printf("Creating IPv4 LPM Table: max_rules = %d, tbl8s = %d\n",
+			conf.max_rules, conf.number_tbl8s);
+
+		lpm = rte_lpm_create(name, socket_id, &conf);
+		if (lpm == NULL)
+			rte_exit(EXIT_FAILURE,
+				 "Unable to create %s LPM table on socket %d\n",
+				 name, socket_id);
+
+		/* populate the LPM table */
+		for (i = 0; i < nb_rt_ip4; i++) {
+			ret = rte_lpm_add(lpm, rt_ip4[i].ip, rt_ip4[i].depth,
+				rt_ip4[i].if_out);
+			if (ret < 0)
+				rte_exit(EXIT_FAILURE,
+					 "Fail to add entry num %u to %s LPM table on socket %d\n",
+					 i, name, socket_id);
+
+			uint32_t_to_char(rt_ip4[i].ip, &a, &b, &c, &d);
+			printf("LPM: Adding route %hhu.%hhu.%hhu.%hhu/%hhu (%hhu)\n",
 				a, b, c, d, rt_ip4[i].depth,
 				rt_ip4[i].if_out);
+		}
 	}
-
-	snprintf(name, sizeof(name), "%s_%u", "rt_ip6", socket_id);
-	conf6.max_rules = RT_IPV6_MAX_RULES;
-	conf6.number_tbl8s = RTE_LPM_TBL8_NUM_ENTRIES;
-	lpm6 = rte_lpm6_create(name, socket_id, &conf6);
-	if (lpm6 == NULL)
-		rte_exit(EXIT_FAILURE, "Unable to create %s LPM table "
-			"on socket %d\n", name, socket_id);
-
-	/* populate the LPM table */
-	for (i = 0; i < nb_rt_ip6; i++) {
-		ret = rte_lpm6_add(lpm6, rt_ip6[i].ip, rt_ip6[i].depth,
-				rt_ip6[i].if_out);
-		if (ret < 0)
-			rte_exit(EXIT_FAILURE, "Fail to add entry num %u to %s "
-				"LPM table on socket %d\n", i, name, socket_id);
-
-		printf("LPM6: Adding route "
-			" %hx:%hx:%hx:%hx:%hx:%hx:%hx:%hx/%hhx (%hhx)\n",
-			(uint16_t)((rt_ip6[i].ip[0] << 8) | rt_ip6[i].ip[1]),
-			(uint16_t)((rt_ip6[i].ip[2] << 8) | rt_ip6[i].ip[3]),
-			(uint16_t)((rt_ip6[i].ip[4] << 8) | rt_ip6[i].ip[5]),
-			(uint16_t)((rt_ip6[i].ip[6] << 8) | rt_ip6[i].ip[7]),
-			(uint16_t)((rt_ip6[i].ip[8] << 8) | rt_ip6[i].ip[9]),
-			(uint16_t)((rt_ip6[i].ip[10] << 8) | rt_ip6[i].ip[11]),
-			(uint16_t)((rt_ip6[i].ip[12] << 8) | rt_ip6[i].ip[13]),
-			(uint16_t)((rt_ip6[i].ip[14] << 8) | rt_ip6[i].ip[15]),
-			rt_ip6[i].depth, rt_ip6[i].if_out);
+	if (nb_rt_ip6) {
+		struct rte_lpm6_config conf6 = { 0 };
+
+		snprintf(name, sizeof(name), "%s_%u", "rt_ip6", socket_id);
+		conf6.max_rules = RT_IPV6_MAX_RULES;
+		conf6.number_tbl8s = RT_IPV6_TBL8_NUM_ENTRIES;
+
+		printf("Creating IPv6 LPM Table: max_rules = %d, tbl8s = %d\n",
+			conf6.max_rules, conf6.number_tbl8s);
+
+		lpm6 = rte_lpm6_create(name, socket_id, &conf6);
+		if (lpm6 == NULL)
+			rte_exit(EXIT_FAILURE,
+				 "Unable to create %s LPM table on socket %d\n",
+				 name, socket_id);
+
+		/* populate the LPM table */
+		for (i = 0; i < nb_rt_ip6; i++) {
+			ret = rte_lpm6_add(lpm6, rt_ip6[i].ip, rt_ip6[i].depth,
+					rt_ip6[i].if_out);
+			if (ret < 0)
+				rte_exit(EXIT_FAILURE,
+					 "Fail to add entry num %u to %s LPM table on socket %d\n",
+					 i, name, socket_id);
+
+			printf("LPM6: Adding route %hx:%hx:%hx:%hx:%hx:%hx:%hx:%hx/%hhx (%hhx)\n",
+				(uint16_t)((rt_ip6[i].ip[0] << 8) |
+					    rt_ip6[i].ip[1]),
+				(uint16_t)((rt_ip6[i].ip[2] << 8) |
+					    rt_ip6[i].ip[3]),
+				(uint16_t)((rt_ip6[i].ip[4] << 8) |
+					    rt_ip6[i].ip[5]),
+				(uint16_t)((rt_ip6[i].ip[6] << 8) |
+					    rt_ip6[i].ip[7]),
+				(uint16_t)((rt_ip6[i].ip[8] << 8) |
+					    rt_ip6[i].ip[9]),
+				(uint16_t)((rt_ip6[i].ip[10] << 8) |
+					    rt_ip6[i].ip[11]),
+				(uint16_t)((rt_ip6[i].ip[12] << 8) |
+					    rt_ip6[i].ip[13]),
+				(uint16_t)((rt_ip6[i].ip[14] << 8) |
+					    rt_ip6[i].ip[15]),
+				rt_ip6[i].depth, rt_ip6[i].if_out);
+		}
 	}
-
 	ctx->rt_ip4 = (struct rt_ctx *)lpm;
 	ctx->rt_ip6 = (struct rt_ctx *)lpm6;
 }
-- 
2.7.4

